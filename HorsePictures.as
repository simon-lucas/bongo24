//AS3///////////////////////////////////////////////////////////////////////////// // Copyright 2016 // ////////////////////////////////////////////////////////////////////////////////package{import flash.events.Event;import flash.display.Sprite;import flash.filesystem.File;import flash.filesystem.FileStream;import flash.filesystem.FileMode;import com.greensock.loading.LoaderMax;import com.greensock.events.LoaderEvent;import com.greensock.loading.ImageLoader;import com.greensock.loading.ImageLoader;import com.greensock.TweenLite; import com.greensock.plugins.TweenPlugin;import com.HorsePictures.HorsePicture;import com.HorsePictures.ThumbSheet;import flash.events.MouseEvent;import flash.utils.Timer;import flash.events.TimerEvent;import com.HorsePictures.ScrollBar;import flash.net.URLLoader;import flash.net.URLRequest;import flash.events.IOErrorEvent;import com.HorsePictures.data.Global;import com.HorsePictures.data.HorseData;import com.studioshitless.events.IButtonEvent;/** * Application entry point for HorsePictures. *  * @langversion ActionScript 3.0 * @playerversion Flash 9.0 *  * @author Simon Lucas * @since 28.01.2016 */public class HorsePictures extends Sprite{	public var slideShowData:Object;	public var horsePics:Array;	public var thumbSheet:ThumbSheet;	public var scrollBar: ScrollBar;	public var instruct: Instruct	public var mainMenu:MainMenuSprite;	public var printMenu: PrintMenuSprite	public var home:HomeButton	/*loader*/	private var loader:URLLoader;		/**	 * @constructor	 */	public function HorsePictures()	{		super();		stage.addEventListener( Event.ENTER_FRAME, initialize );	}	/**	 * Initialize stub.	 */	private function initialize(event:Event):void	{		stage.removeEventListener( Event.ENTER_FRAME, initialize );		trace( "HorsePictures::initialize()" );		//loadConfigSync()		loadLayOutData()		//loadHorseData()		//loadImages()			}		public function onLoaded(event:LoaderEvent):void{				trace("yow")		thumbSheet = new ThumbSheet()		scrollBar = new ScrollBar();		thumbSheet.addEventListener("picOpen",scrollBar.hideScroll)		thumbSheet.addEventListener("picClose",scrollBar.showScroll)		var thumbSheetHieght=thumbSheet.addPics(horsePics)		var bottomScrollLimit:Number = -(thumbSheetHieght - 1080)						scrollBar.init(thumbSheet, thumbSheetHieght, bottomScrollLimit)				scrollBar.checkScrollButtons()		//printList()		instruct = new Instruct()		instruct.y=42		instruct.x=960						home= new HomeButton()		home.x = 80		home.y = 90		home.addEventListener(IButtonEvent.BUTTONCLICKED,goMenu)		makeMenu()		makePrintMenu()	}		public function makeMenu():void{		mainMenu = new MainMenuSprite()		mainMenu.printMenu.addEventListener(MouseEvent.MOUSE_DOWN,goPrint)		mainMenu.picMenu.addEventListener(MouseEvent.MOUSE_DOWN,goPic)		addChild(mainMenu)	}		public function makePrintMenu():void{		printMenu = new PrintMenuSprite()		printMenu.init()		//mainMenu.printMenu.addEventListener(MouseEvent.MOUSE_DOWN,goPrint)		//mainMenu.picMenu.addEventListener(MouseEvent.MOUSE_DOWN,goPic)		//addChild(mainMenu)	}		public function showPics():void{		addChild(thumbSheet)		addChild(scrollBar)		addChild(instruct)		addChild(home)			}		public function hidePics():void{		if (contains(thumbSheet)) removeChild(thumbSheet)		if (contains(scrollBar)) removeChild(scrollBar)		if (contains(instruct)) removeChild(instruct)		if (contains(home)) removeChild(home)			}		public function goPic(e:MouseEvent):void{		mainMenu.visible=false		showPics()			}		public function goPrint(e:MouseEvent):void{		mainMenu.visible=false				addChild(printMenu)		addChild(home)	}		public function goMenu(e:IButtonEvent):void{		hidePics()		if (contains(printMenu)) removeChild(printMenu)		mainMenu.visible=true	}		public function printList():void{		for (var i:int = 0; i < Global.horseCollection.length; i++)		{			var rContent = Global.thumbQueue.getLoader(Global.horseCollection[i].name).rawContent			if (rContent){				trace("Pic:","\t", Math.round(rContent.width), "\t",Math.round(rContent.height) , "\t",Global.horseCollection[i].title)			}								}	}		public function loadImages():void{		Global.thumbQueue = new LoaderMax({name:"thumbQueue", onProgress:progressHandler, onComplete:onLoaded, onError:errorHandler});		Global.largeQueue = new LoaderMax({name:"largeQueue", onProgress:progressHandler, onComplete:onLoaded, onError:errorHandler});		horsePics=[];		for (var i:int = 0; i < Global.horseCollection.length; i++)		{			var h= new HorsePicture();			//trace(i, Global.horseCollection[i].image)			//h.init(i, Global.horseCollection[i].image+".jpg")			h.init(i, Global.horseCollection[i])			//h.image=Global.horseCollection[i].image			var imageLoader = new ImageLoader("images/thumbs/"+Global.horseCollection[i].image+".jpg", {name:Global.horseCollection[i].name , vAlign:"center", estimatedBytes:2400, container:h.thumbHolder, alpha:1, width:300, height:300, scaleMode:"proportionalInside", centerRegistration:true})			Global.thumbQueue.append(imageLoader);			horsePics.push(h)					}		Global.thumbQueue.load()	}		public function loadHorseData():void{		loader = new URLLoader();		var request:URLRequest = new URLRequest("data/MM.P.01 BSAT - Print Collection Updated.csv");		loader.load(request);		loader.addEventListener(Event.COMPLETE, horseDataLoaded);			loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);	}		private function loadLayOutData():void{				var myXML:XML;		var myLoader:URLLoader = new URLLoader();		myLoader.load(new URLRequest("data/grid.json"));		myLoader.addEventListener(Event.COMPLETE, gridLoaded);			myLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);	}		private function ioErrorHandler(e:IOErrorEvent):void{		trace("onError: " + e.type);	}		private function gridLoaded(e:Event):void{		//loader.removeEventListener(Event.COMPLETE, gridLoaded);		var jsonContent:URLLoader = URLLoader(e.target);		//configData = (JSON.parse(jsonContent.data));		Global.layoutData = (JSON.parse(e.target.data)).Graphic.Group.Group[0].BitmapImage;		//trace(Global.layoutData)		for (var i:int = 0; i < Global.layoutData.length; i++)		{			//trace(i, Global.layoutData[i]["-x"], Global.layoutData[i]["-y"],Global.layoutData[i]["-scaleX"],Global.layoutData[i]["-scaleY"],Global.layoutData[i]["-source"])			Global.layoutData[i].x=Global.layoutData[i]["-x"]			Global.layoutData[i].y=Global.layoutData[i]["-y"]			Global.layoutData[i].scaleY=Global.layoutData[i]["-scaleY"]			Global.layoutData[i].scaleX=Global.layoutData[i]["-scaleX"]						var str1 = (Global.layoutData[i]["-source"].split("/")[Global.layoutData[i]["-source"].split("/").length-1])			var str1 = str1.split("'")[0]			//trace(str1)			Global.layoutData[i].fileName=str1		}				loadHorseData()			}		private function horseDataLoaded(e:Event):void{		loader.removeEventListener(Event.COMPLETE, horseDataLoaded);		var csv:URLLoader = URLLoader(e.target);		var dataLines = csv.data.split("\n")				var ITEMROWS:uint=1		var coltitles=["name", "type", "artist", "title", "group", "note", "date", "image", "copyright", "keyImage"];		/* from row 3 to the end in steps of 3*/		for (var i:int =1; i < dataLines.length; i++)		{				//trace(i)			var dataObj= new HorseData()			var dataLineArray:Array = dataLines[i].split("|") //the line of cells			//trace(dataLineArray)									if (dataLineArray[0]!="")  {				for (var j:uint = 0; j <coltitles.length; j++){					//trace("col ", coltitles[j], ": ", dataLineArray[j])					dataObj[coltitles[j]]=dataLineArray[j]				}				Global.horseCollection.push(dataObj)				//trace(Global.horseCollection.length-1, Global.horseCollection[Global.horseCollection.length-1].artist, Global.horseCollection[Global.horseCollection.length-1].image)			}			//trace(Global.horseCollection[0].artist)		}		Global.horseCollection.sortGroups()		var artist:String = Global.horseCollection[34].artist		var group:String = Global.horseCollection[34].group		trace("X", Global.horseCollection.getGroup(artist, group))			/*Global.zipUpData = new ZipUpData()			Global.zipUpData.addEventListener("zipupLoaded", startApp)			Global.zipUpData.init()*/			//startApp(null)		loadImages()	}		public function progressHandler(event:LoaderEvent):void{		//trace("progress: " + event.target.progress);	}	public function errorHandler(event:LoaderEvent):void{		trace("error occured with " + event.target + ": " + event.text);	}		private function loadConfigSync():void{		var fileOpened:File = File.applicationDirectory.resolvePath("data/pictures.json");		var newfileStream:FileStream = new FileStream();		newfileStream.open(fileOpened, FileMode.READ);		var s:String=newfileStream.readUTFBytes(newfileStream.bytesAvailable);		slideShowData = JSON.parse(s);		newfileStream.close();	}	}}